[{ "name": "conditions.bs", "text": "let counter = 0;\r\n\r\nif (counter > 0) {\r\n    println(\"Counter is greater than 0.\")\r\n} else if (counter < 0) {\r\n    println(\"Counter is less than 0.\")\r\n} else {\r\n    println(\"Counter is equal to 0.\")\r\n}\r\n\r\nlet name = \"John\";\r\n\r\nif (counter > 0 && name == \"Lucy\") {\r\n    println(\"Lucy's counter is greater than 0.\")\r\n} else if (counter <= 0 | name == \"Simon\") {\r\n    println(\"The counter is less than or equal to 0 or Simon's.\")\r\n} else {\r\n    println(\"We just don't have the math yet.\")\r\n}\r\n"},
{ "name": "conditions.bsx", "text": "lit counter be 0 rn\r\n\r\nsus (counter thicc 0) {\r\n    waffle(\"Counter is greater than 0.\")\r\n} impostor sus (counter smol 0) {\r\n    waffle(\"Counter is less than 0.\")\r\n} impostor {\r\n    waffle(\"Counter is equal to 0.\")\r\n}\r\n\r\nlit name be \"John\" rn\r\n\r\nsus (counter thicc 0 btw name nah \"Lucy\") {\r\n    waffle(\"Lucy's counter is greater than 0.\")\r\n} impostor sus (counter <= 0 carenot name nah \"Simon\") {\r\n    waffle(\"The counter is less than or equal to 0 or Simon's.\")\r\n} impostor {\r\n    waffle(\"We just don't have the math yet.\")\r\n}\r\n"},
{ "name": "errors.bs", "text": "let counter = 0\r\n\r\n\"Using try allows you to handle errors\"\r\ntry {\r\n    \"Let's try to increment 'countr'\"\r\n    counter = countr + 1\r\n    \"              ^ missing 'e'\"\r\n} catch {\r\n    \"We can now access the 'error' string\"\r\n    println(\"Uh oh!\", error)\r\n}\r\n"},
{ "name": "errors.bsx", "text": "lit counter be 0 rn\r\n\r\n\"Using try allows you to handle errors\"\r\nfuck_around {\r\n    \"Let's try to increment 'countr'\"\r\n    counter be countr + 1\r\n    \"              ^ missing 'e'\"\r\n} find_out {\r\n    \"We can now access the 'error' string\"\r\n    waffle(\"Uh oh!\", error)\r\n}\r\n"},
{ "name": "hello_world.bs", "text": "println(\"Hello, world!\")\r\n"},
{ "name": "hello_world.bsx", "text": "waffle(\"Hello, world!\")\r\n"},
{ "name": "hypotenuse.bs", "text": "\"Calculates the hypotenuse of the triangle\"\r\nfn quadraticFormula(a, b) {\r\n    math.sqrt(a * a + b * b)\r\n}\r\n\r\n\"3 4 5 triangle\"\r\nprintln(quadraticFormula(3, 4))\r\n\r\n\"9 12 15 triangle\"\r\nprintln(quadraticFormula(9, 12))\r\n\r\n\"1 2 ??? triangle\"\r\nprintln(quadraticFormula(1, 2))\r\n"},
{ "name": "hypotenuse.bsx", "text": "\"Calculates the hypotenuse of the triangle\"\r\nbruh quadraticFormula(a, b) {\r\n    nerd.sqrt(a * a + b * b)\r\n}\r\n\r\n\"3 4 5 triangle\"\r\nwaffle(quadraticFormula(3, 4))\r\n\r\n\"9 12 15 triangle\"\r\nwaffle(quadraticFormula(9, 12))\r\n\r\n\"1 2 ??? triangle\"\r\nwaffle(quadraticFormula(1, 2))\r\n"},
{ "name": "loops.bs", "text": "\"We can loop from 0 to 100\"\r\nfor (let i = 0; i < 100; i = i + 1) {\r\n    println(\"Currently at\", i)\r\n}\r\n"},
{ "name": "loops.bsx", "text": "\"We can iterate from 0 to 100\"\r\nyall (lit i be 0 rn i smol 100 rn i be i + 1) {\r\n    waffle(\"Currently at\", i)\r\n}\r\n"},
{ "name": "mandelbrot.bs", "text": "println(\"Mandelbrot set visualiser originally written in Bussin X by SKM GEEK.\")\r\n\r\nfn mandelbrot(real, imag) {\r\n    let limit = 100;\r\n    let zReal = real;\r\n    let zImag = imag;\r\n\r\n    let break = false;\r\n\r\n    let return = limit;\r\n\r\n    for (let i = 0; i < limit; i = i + 1) {\r\n        if (break == false) {\r\n            let rtwo = zReal * zReal;\r\n            let itwo = zImag * zImag;\r\n\r\n            if (rtwo + itwo > 4) {\r\n                break = true\r\n                return = i\r\n            } else {\r\n                zImag = 2 * zReal * zImag + imag\r\n                zReal = rtwo - itwo + real\r\n            }\r\n        }\r\n    }\r\n    return\r\n}\r\n\r\nlet width = 150;\r\nlet height = 50;\r\n\r\nlet xstart = 0 - 9 / 4;\r\nlet xfin = 1 / 4;\r\nlet ystart = 0 - 1;\r\nlet yfin = 1;\r\n\r\nlet dx = yfin - xstart / width - 1;\r\nlet dy = yfin - ystart / height - 1;\r\n\r\nlet line = \"${}\";\r\nlet x = 0;\r\nlet y = 0;\r\nlet value = 0;\r\n\r\nlet borderH = \"++${}\";\r\nfor (let i = 0; i < width; i = i + 1) {\r\n    borderH = format(borderH, \"=${}\")\r\n}\r\nborderH = format(borderH, \"++\")\r\nprintln(borderH)\r\n\r\nfor (let i = 0; i < height; i = i + 1) {\r\n    line = \"||${}\"\r\n    for (let j = 0; j < width; j = j + 1) {\r\n        x = xstart + j * dx\r\n        y = ystart + i * dy\r\n\r\n        value = mandelbrot(x, y)\r\n\r\n        if (value == 100) {\r\n            line = format(line, \" ${}\")\r\n        } else if (value > 50) {\r\n            line = format(line, \"-${}\")\r\n        } else if (value > 25) {\r\n            line = format(line, \"+${}\")\r\n        } else if (value > 10) {\r\n            line = format(line, \"o${}\")\r\n        } else if (value > 5) {\r\n            line = format(line, \"0${}\")\r\n        } else {\r\n            line = format(line, \"#${}\")\r\n        }\r\n    }\r\n    line = format(line, \"||\")\r\n    println(line)\r\n}\r\nprintln(borderH)\r\n"},
{ "name": "mandelbrot.bsx", "text": "waffle(\"Mandelbrot set visualiser written in Bussin X by SKM GEEK.\")\r\n\r\nbruh mandelbrot(real, imag) {\r\n    lit limit be 100 rn\r\n    lit zReal be real rn\r\n    lit zImag be imag rn\r\n\r\n    lit break be cap rn\r\n\r\n    lit return be limit rn\r\n\r\n    yall (lit i be 0 rn i smol limit rn i be i + 1) {\r\n        sus (break fr cap) {\r\n            lit rtwo be zReal * zReal rn\r\n            lit itwo be zImag * zImag rn\r\n\r\n            sus (rtwo + itwo thicc 4) {\r\n                break be nocap\r\n                return be i\r\n            } impostor {\r\n                zImag be 2 * zReal * zImag + imag\r\n                zReal be rtwo - itwo + real\r\n            }\r\n        }\r\n    }\r\n    return\r\n}\r\n\r\nlit width be 150 rn\r\nlit height be 50 rn\r\n\r\nlit xstart be 0 - (9/4) rn\r\nlit xfin be (1/4) rn\r\nlit ystart be 0 - 1 rn\r\nlit yfin be 1 rn\r\n\r\nlit dx be (yfin - xstart) / (width - 1) rn\r\nlit dy be (yfin - ystart) / (height - 1) rn\r\n\r\nlit line be \"${}\" rn\r\nlit x be 0 rn\r\nlit y be 0 rn\r\nlit value be 0 rn\r\n\r\nlit borderH be \"++${}\" rn\r\nyall (lit i be 0 rn i smol width rn i be i + 1) {\r\n    borderH be format(borderH, \"=${}\")\r\n}\r\nborderH be format(borderH, \"++\")\r\nwaffle(borderH)\r\n\r\nyall (lit i be 0 rn i smol height rn i be i + 1) {\r\n    line be \"||${}\"\r\n    yall (lit j be 0 rn j smol width rn j be j + 1) {\r\n        x be xstart + j*dx\r\n        y be ystart + i*dy\r\n\r\n        value be mandelbrot(x,y)\r\n\r\n        sus (value fr 100) {\r\n            line be format(line, \" ${}\")\r\n        } impostor sus (value thicc 50) {\r\n            line be format(line, \"-${}\")\r\n        } impostor sus (value thicc 25) {\r\n            line be format(line, \"+${}\")\r\n        } impostor sus (value thicc 10) {\r\n            line be format(line, \"o${}\")\r\n        } impostor sus (value thicc 5) {\r\n            line be format(line, \"0${}\")\r\n        } impostor {\r\n            line be format(line, \"#${}\")\r\n        }\r\n    }\r\n    line be format(line, \"||\")\r\n    waffle(line)\r\n}\r\nwaffle(borderH)\r\n"}]